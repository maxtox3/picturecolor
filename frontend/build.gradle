group "com.picturecolor"
version "0.0.1"

apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-platform-js'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

repositories {
    jcenter()
}

dependencies {
    expectedBy project(":common")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

    implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.11"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"

    implementation "org.jetbrains:kotlin-react:$kotlin_react_version"
    implementation "org.jetbrains:kotlin-react-dom:$kotlin_react_version"
    implementation "org.jetbrains:kotlin-styled:$kotlin_styled_version"

    implementation "io.ktor:ktor-client-js:$ktor_version"
    implementation "io.ktor:ktor-client-serialization-js:$ktor_version"
}

kotlinFrontend {

    downloadNodeJsVersion = "latest"

    sourceMaps = false

    npm {
        dependency "react"
        dependency "react-dom"
        dependency "core-js"
        dependency "inline-style-prefixer"
        dependency "styled-components"
        dependency "text-encoding"

        dependency "kotlin"
        dependency "kotlinx-html-js"
        dependency "kotlin-react"
        dependency "kotlin-react-dom"
        dependency "kotlin-styled"

        dependency("@material-ui/core","^4.3.3")
        dependency("@material-ui/icons","^4.2.1")
    }

    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/resources')
        proxyUrl = "http://localhost:9090"
    }
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}


[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
    }
}